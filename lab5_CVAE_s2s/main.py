from __future__ import unicode_literals, print_function, division
from io import open
import unicodedata
import string
import re
import random
import time
import math
import torch
import torch.nn as nn
from torch import optim
import torch.nn.functional as F
import matplotlib.pyplot as plt
plt.switch_backend('agg')
import matplotlib.ticker as ticker
import numpy as np
from os import system
from nltk.translate.bleu_score import SmoothingFunction, sentence_bleu
from dataloader import WordDataset
from torch.utils.data import DataLoader
from cvae import CVAE


"""========================================================================================
The sample.py includes the following template functions:

1. Encoder, decoder
2. Training function
3. BLEU-4 score function
4. Gaussian score function

You have to modify them to complete the lab.
In addition, there are still other functions that you have to 
implement by yourself.

1. The reparameterization trick
2. Your own dataloader (design in your own way, not necessary Pytorch Dataloader)
3. Output your results (BLEU-4 score, conversion words, Gaussian score, generation words)
4. Plot loss/score
5. Load/save weights

There are some useful tips listed in the lab assignment.
You should check them before starting your lab.
========================================================================================"""

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
SOS_token = 0
EOS_token = 1
#----------Hyper Parameters----------#
hidden_size = 256
lr = 0.05
#The number of vocabulary
vocab_size = 28
teacher_forcing_ratio = 1.0
empty_input_ratio = 0.1
KLD_weight = 0.0
LR = 0.05


################################
#Example inputs of compute_bleu
################################
#The target word
reference = 'accessed'
#The word generated by your model
output = 'access'

#compute BLEU-4 score
def compute_bleu(output, reference):
    cc = SmoothingFunction()
    if len(reference) == 3:
        weights = (0.33,0.33,0.33)
    else:
        weights = (0.25,0.25,0.25,0.25)
    return sentence_bleu([reference], output,weights=weights,smoothing_function=cc.method1)


"""============================================================================
example input of Gaussian_score

words = [['consult', 'consults', 'consulting', 'consulted'],
['plead', 'pleads', 'pleading', 'pleaded'],
['explain', 'explains', 'explaining', 'explained'],
['amuse', 'amuses', 'amusing', 'amused'], ....]

the order should be : simple present, third person, present progressive, past
============================================================================"""

def Gaussian_score(words):
    words_list = []
    score = 0
    yourpath = 'dataset/train.txt'#should be your directory of train.txt
    with open(yourpath,'r') as fp:
        for line in fp:
            word = line.split(' ')
            word[3] = word[3].strip('\n')
            words_list.extend([word])
        for t in words:
            for i in words_list:
                if t == i:
                    score += 1
    return score/len(words)


    
def train(word_tensor, tense_tensor, encoder, decoder, encoder_optimizer, decoder_optimizer, criterion, max_length=30):
    encoder_hidden = encoder.initHidden()
    encoder_cell = encoder.initCell()

    encoder_optimizer.zero_grad()
    decoder_optimizer.zero_grad()

    word_tensor = word_tensor[0]
    tense_tensor = tense_tensor[0]
    word_tensor, tense_tensor = word_tensor.to(device), tense_tensor.to(device)

    encoder_outputs = torch.zeros(max_length, encoder.hidden_size, device=device)

    loss = 0

    #----------sequence to sequence part for encoder----------#
    input_tensor = torch.cat((word_tensor, tense_tensor))
    for i in range(len(input_tensor)):
        encoder_output, encoder_hidden, encoder_cell = encoder(input_tensor[i], encoder_hidden, encoder_cell)

    decoder_input = torch.tensor([[SOS_token]], device=device)

    decoder_hidden = encoder_hidden

    use_teacher_forcing = True if random.random() < teacher_forcing_ratio else False


    #----------sequence to sequence part for decoder----------#
    if use_teacher_forcing:
        # Teacher forcing: Feed the target as the next input
        for di in range(target_length):
            decoder_output, decoder_hidden, decoder_attention = decoder(
                decoder_input, decoder_hidden, encoder_outputs)
            loss += criterion(decoder_output, target_tensor[di])
            decoder_input = target_tensor[di]  # Teacher forcing

    else:
        # Without teacher forcing: use its own predictions as the next input
        for di in range(target_length):
            decoder_output, decoder_hidden, decoder_attention = decoder(
                decoder_input, decoder_hidden, encoder_outputs)
            topv, topi = decoder_output.topk(1)
            decoder_input = topi.squeeze().detach()  # detach from history as input

            loss += criterion(decoder_output, target_tensor[di])
            if decoder_input.item() == EOS_token:
                break

    loss.backward()

    encoder_optimizer.step()
    decoder_optimizer.step()

    return loss.item() / target_length


def asMinutes(s):
    m = math.floor(s / 60)
    s -= m * 60
    return '%dm %ds' % (m, s)


def timeSince(since, percent):
    now = time.time()
    s = now - since
    es = s / (percent)
    rs = es - s
    return '%s (- %s)' % (asMinutes(s), asMinutes(rs))

def criterion(predict_distribution, target_distribution, mu, var):
    cross_entropy = nn.CrossEntropyLoss()
    reconstruction_loss = cross_entropy(predict_distribution, target_distribution)
    kl = nn.KLDivLoss()

    # KL(N(mu, logvar)||N(0,1))
    # mu, var = mu.data.numpy(), var.data.numpy()
    # q = np.random.normal(mu, var)
    q = torch.normal(mu, var)
    uniform = torch.normal(torch.zeros(32),torch.ones(32))
    uniform = uniform.to(device)
    kl_loss = kl(q.view(-1),uniform)
    return reconstruction_loss, kl_loss

if __name__ == '__main__':
    dataset = WordDataset('train')
    max_length = dataset.max_length + 5
    dataloader = DataLoader(dataset, batch_size=1, shuffle=True)
    model = CVAE(max_length)
    model = model.to(device)
    optimizer = optim.SGD(model.parameters(), lr=lr)
    # encoder = EncoderRNN(vocab_size, hidden_size).to(device)
    # decoder = DecoderRNN(hidden_size, vocab_size).to(device)

    # start = time.time()
    # plot_losses = []
    # print_loss_total = 0  # Reset every print_every
    # plot_loss_total = 0  # Reset every plot_every

    # encoder_optimizer = optim.SGD(encoder.parameters(), lr=lr)
    # decoder_optimizer = optim.SGD(decoder.parameters(), lr=lr)
    # # training_pairs = [tensorsFromPair(random.choice(pairs))
    # #                   for i in range(n_iters)]

    # criterion = nn.CrossEntropyLoss()

    for word_tensor, tense_tensor in dataloader:
        optimizer.zero_grad()
        word_tensor = word_tensor[0]
        tense_tensor = tense_tensor[0]
        word_tensor, tense_tensor = word_tensor.to(device), tense_tensor.to(device)
        output, predict_distribution, mean, log_var = model(word_tensor, tense_tensor)
        reconstruction_loss, kl_loss = criterion(predict_distribution, word_tensor.view(-1), mean, log_var)
        loss = reconstruction_loss - kl_loss
        loss.backward()
        optimizer.step()

        print('Predict: ',output)
        print('Reconstruction loss: %f\nKL loss: %f\n---------------------' % (reconstruction_loss, kl_loss))
        
        # loss = train(word_tensor, tense_tensor, encoder,
        #              decoder, encoder_optimizer, decoder_optimizer, criterion, max_length)
        # print_loss_total += loss
        # plot_loss_total += loss

        # if iter % print_every == 0:
        #     print_loss_avg = print_loss_total / print_every
        #     print_loss_total = 0
        #     print('%s (%d %d%%) %.4f' % (timeSince(start, iter / n_iters),
        #                                  iter, iter / n_iters * 100, print_loss_avg))

